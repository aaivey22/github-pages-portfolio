{"version":3,"sources":["images/avatar.png","components/about/About.js","components/navbar/Navbar.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","About","useStyles","makeStyles","theme","menuSliderContainer","width","background","height","avatar","display","margin","spacing","ListItem","color","menuItems","listIcon","Home","listText","listPath","AssignmentInd","Apps","ContactMail","Navbar","slider","useState","right","state","setState","toggleSlider","open","classes","Box","component","AppBar","position","style","Toolbar","IconButton","onClick","MenuOpen","fontSize","anchor","close","className","Avatar","src","alt","Divider","List","map","lsItem","key","button","Link","to","ListItemIcon","ListItemText","primary","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,oC,yJCU5BC,G,YARD,WACV,OACI,wC,kMCiBFC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,oBAAqB,CACjBC,MAAO,IACPC,WAAY,UACZC,OAAQ,QAEZC,OAAQ,CACJC,QAAS,QACTC,OAAQ,cACRL,MAAOF,EAAMQ,QAAQ,IACrBJ,OAAQJ,EAAMQ,QAAQ,KAE1BC,SAAU,CACNC,MAAO,eAITC,EAAY,CACd,CACIC,SAAU,kBAACC,EAAA,EAAD,MACVC,SAAU,QACVC,SAAU,KAEd,CACIH,SAAU,kBAACI,EAAA,EAAD,MACVF,SAAU,aACVC,SAAU,eAEd,CACIH,SAAU,kBAACK,EAAA,EAAD,MACVH,SAAU,YACVC,SAAU,cAEd,CACIH,SAAU,kBAACM,EAAA,EAAD,MACVJ,SAAU,UACVC,SAAU,aAwDHI,EApDC,WAAO,IAWFC,EAXC,EACQC,mBAAS,CAC/BC,OAAO,IAFO,mBACXC,EADW,KACJC,EADI,KAKZC,EAAgB,SAACL,EAAQM,GAAT,OAAkB,WACpCF,EAAS,2BAAKD,GAAN,kBAAcH,EAASM,OAG7BC,EAAU7B,IAqBhB,OACI,oCACI,kBAAC8B,EAAA,EAAD,CAAKC,UAAU,OACX,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAO,CAAC7B,WAAY,YAC1C,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAASV,EAAa,SAAS,IAC3C,kBAACW,EAAA,EAAD,CAAUC,SAAS,QAAQL,MAAO,CAACtB,MAAO,cAK1C,kBAAC,IAAD,CAAmB4B,OAAO,QAC1BZ,KAAMH,EAAMD,MAAOiB,MAAOd,EAAa,SAAS,KA/BnDL,EAgCiB,QA9B9B,kBAACQ,EAAA,EAAD,CAAKY,UAAWb,EAAQ1B,oBAAqB4B,UAAU,MACvDM,QAASV,EAAaL,GAAQ,IAC9B,kBAACqB,EAAA,EAAD,CAAQD,UAAWb,EAAQtB,OAAQqC,IAAKrC,IAAQsC,IAAI,gBACpD,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACKlC,EAAUmC,KAAI,SAACC,EAAQC,GAAT,OACX,kBAACvC,EAAA,EAAD,CAAUwC,QAAM,EAACD,IAAKA,EAAKnB,UAAWqB,IAAMC,GAAIJ,EAAOhC,UACvD,kBAACqC,EAAA,EAAD,CAAcZ,UAAWb,EAAQlB,UAC5BsC,EAAOnC,UAEZ,kBAACyC,EAAA,EAAD,CAAcb,UAAWb,EAAQlB,SAAU6C,QAASP,EAAOjC,wBClE5DyC,MAbf,WACE,OACE,yBAAKf,UAAU,OACb,6BACE,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,UCCYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.baeea839.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.5b16128d.png\";","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            About\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;","import React, {useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport MobileRightDrawer from '@material-ui/core/Drawer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AssignmentInd, Home, Apps, ContactMail, MenuOpen } from '@material-ui/icons'\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    ListItem,\r\n    IconButton,\r\n    ListItemText,\r\n    Avatar,\r\n    Divider,\r\n    List,\r\n    Box,\r\n    ListItemIcon\r\n} from '@material-ui/core';\r\nimport avatar from '../../images/avatar.png'\r\n\r\n\r\n//CSS styles\r\nconst useStyles = makeStyles(theme => ({\r\n    menuSliderContainer: {\r\n        width: 250,\r\n        background: \"#ffcca6\",\r\n        height: \"100%\"\r\n    },\r\n    avatar: {\r\n        display: \"block\",\r\n        margin: \"0.5rem auto\",\r\n        width: theme.spacing(13),\r\n        height: theme.spacing(13)\r\n    },\r\n    ListItem: {\r\n        color: \"#615ebd\"\r\n    }\r\n}));\r\n\r\nconst menuItems = [\r\n    {\r\n        listIcon: <Home/>,\r\n        listText: \"About\",\r\n        listPath: \"/\"\r\n    },\r\n    {\r\n        listIcon: <AssignmentInd/>,\r\n        listText: \"Experience\",\r\n        listPath: \"/experience\"\r\n    },\r\n    {\r\n        listIcon: <Apps/>,\r\n        listText: \"Portfolio\",\r\n        listPath: \"/portfolio\"\r\n    },    \r\n    {\r\n        listIcon: <ContactMail/>,\r\n        listText: \"Contact\",\r\n        listPath: \"/contact\"\r\n    }    \r\n]\r\n\r\n const Navbar = () => {\r\n    const [state, setState] = useState({\r\n        right: false\r\n    });\r\n\r\n    const toggleSlider = ((slider, open) => () => {\r\n        setState({ ...state, [slider]: open });\r\n    }); \r\n\r\n    const classes = useStyles()\r\n\r\n    const sideList = slider => (\r\n\r\n        <Box className={classes.menuSliderContainer} component=\"div\"\r\n        onClick={toggleSlider(slider, false)}>\r\n        <Avatar className={classes.avatar} src={avatar} alt=\"Angela Ivey\" />\r\n        <Divider />\r\n        <List>\r\n            {menuItems.map((lsItem, key) => (\r\n                <ListItem button key={key} component={Link} to={lsItem.listPath}>\r\n                <ListItemIcon className={classes.ListItem}>\r\n                    {lsItem.listIcon}\r\n                </ListItemIcon>\r\n                <ListItemText className={classes.ListItem} primary={lsItem.listText} />\r\n            </ListItem>\r\n            ))}\r\n        </List>\r\n        </Box>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Box component=\"nav\">\r\n                <AppBar position=\"static\" style={{background: \"#615ebd\"}}>\r\n                    <Toolbar>\r\n                        <IconButton onClick={toggleSlider(\"right\", true)}>\r\n                        <MenuOpen fontSize=\"large\" style={{color: \"#ffcca6\"}} />\r\n                        </IconButton>\r\n                        {/* <Typography variant=\"h5\"style={{color: \"tan\"}}>\r\n                            View\r\n                        </Typography> */}\r\n                        <MobileRightDrawer anchor=\"right\"\r\n                        open={state.right} close={toggleSlider(\"right\", false)}>\r\n                            {sideList(\"right\")}\r\n                        </MobileRightDrawer>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport About from '../about/About';\nimport Navbar from '../navbar/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Navbar />\n        <div>\n        <About />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}